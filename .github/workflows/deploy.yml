name: Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      ECS_TASK_FAMILY: ${{ secrets.ECS_TASK_FAMILY }}
      ECS_EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
      ECS_TASK_ROLE_ARN: ${{ secrets.ECS_TASK_ROLE_ARN }}
      ECS_LOG_GROUP: ${{ secrets.ECS_LOG_GROUP }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest .

      - name: Push image
        run: |
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPOSITORY:latest

      - name: Render task definition
        run: |
          sed \
            -e "s|ECR_IMAGE_URI_PLACEHOLDER|$ECR_REPOSITORY:$IMAGE_TAG|" \
            -e "s|ECS_EXECUTION_ROLE_ARN_PLACEHOLDER|$ECS_EXECUTION_ROLE_ARN|" \
            -e "s|ECS_TASK_ROLE_ARN_PLACEHOLDER|$ECS_TASK_ROLE_ARN|" \
            -e "s|ECS_LOG_GROUP_PLACEHOLDER|$ECS_LOG_GROUP|" \
            -e "s|AWS_REGION_PLACEHOLDER|$AWS_REGION|" \
            -e "s|ODYSSEY_TASK_FAMILY_PLACEHOLDER|$ECS_TASK_FAMILY|" \
            -e "s|__SECRET_KEY_PLACEHOLDER__|$DJANGO_SECRET_KEY|" \
            -e "s|__ALLOWED_HOSTS_PLACEHOLDER__|$ALLOWED_HOSTS|" \
            -e "s|__DATABASE_URL_PLACEHOLDER__|$DATABASE_URL|" \
            ecs-taskdef-template.json > taskdef.json
          echo "Generated taskdef.json:"; cat taskdef.json

      - name: Register task definition
        id: taskdef
        run: |
          REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASKDEF_ARN=$REVISION" >> $GITHUB_ENV

      - name: Deploy service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --task-definition $TASKDEF_ARN

      - name: Post-deploy health check
        run: |
          echo "Waiting 60s for service stabilization..."; sleep 60
          aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments'
