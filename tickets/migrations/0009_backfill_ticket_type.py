# Generated by Django 5.2.6 on 2025-09-20 02:32

from django.db import migrations


def backfill_ticket_type(apps, schema_editor):
    Ticket = apps.get_model('tickets', 'Ticket')
    Epic = apps.get_model('tickets', 'Epic')
    # Strategy:
    # 1. Any ticket with no parent and no epic FK but whose title matches an Epic name? Leave as 'ticket'.
    # 2. Any ticket that currently has child tickets (via parent FK) should be promoted to 'epic' if not already set.
    # 3. Any ticket with an epic FK should become type 'ticket' (unless it itself has children making it an epic candidate).
    # 4. Bugs not yet defined historically, so leave anything without children at 'ticket'.
    # Note: We do not auto-create bug types; those will be explicitly chosen moving forward.

    # First, build a set of ticket ids that are parents (have children)
    child_parent_ids = set(Ticket.objects.filter(parent__isnull=False).values_list('parent_id', flat=True))

    # Promote parent tickets to epics
    Ticket.objects.filter(id__in=child_parent_ids).update(ticket_type='epic')

    # Tickets with an epic FK but not parents themselves should remain 'ticket'
    # Ensure they are set explicitly (legacy default may already be 'ticket')
    Ticket.objects.filter(epic__isnull=False).exclude(id__in=child_parent_ids).update(ticket_type='ticket')

    # Leave all others as their default 'ticket'.


def noop_reverse(apps, schema_editor):
    # Non-reversible backfill.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tickets', '0008_ticket_parent_ticket_related_tickets_and_more'),
    ]

    operations = [
        migrations.RunPython(backfill_ticket_type, noop_reverse),
    ]
