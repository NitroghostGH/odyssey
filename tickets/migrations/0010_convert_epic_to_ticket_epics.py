# Generated by Django 5.2.6 on 2025-09-20 02:41

from django.db import migrations


def convert_epics(apps, schema_editor):
    Ticket = apps.get_model('tickets', 'Ticket')
    Epic = apps.get_model('tickets', 'Epic')
    db_alias = schema_editor.connection.alias

    for legacy_epic in Epic.objects.using(db_alias).all():
        # Find boards that have tickets referencing this legacy epic
        related_tickets = Ticket.objects.using(db_alias).filter(epic=legacy_epic)
        board_ids = list(related_tickets.values_list('board_id', flat=True).distinct())
        if not board_ids:
            # No tickets reference this epic; skip creating a placeholder Ticket epic
            continue
        for b_id in board_ids:
            board_tickets = related_tickets.filter(board_id=b_id)
            # Create (or reuse) an epic Ticket for this board
            ticket_epic = Ticket.objects.using(db_alias).filter(
                board_id=b_id, title=legacy_epic.name, ticket_type='epic'
            ).first()
            if not ticket_epic:
                ticket_epic = Ticket.objects.using(db_alias).create(
                    board_id=b_id,
                    title=legacy_epic.name,
                    description=legacy_epic.description,
                    ticket_type='epic',
                    importance=5,
                    urgency=5
                )
            # Reassign tickets under this board referencing legacy epic
            board_tickets.update(parent=ticket_epic)

    # At this stage Ticket.epic remains for backward compatibility (removed in subsequent migration)


def noop_reverse(apps, schema_editor):
    # Non reversible - original Epic objects are not recoverably mapped once merged.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tickets', '0009_backfill_ticket_type'),
    ]

    operations = [
        migrations.RunPython(convert_epics, noop_reverse),
    ]
